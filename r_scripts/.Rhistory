kallisto_dirs <- file.path(".", "results", sample_id)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(s2c, path = kallisto_dirs)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(sample2condition, path = kallisto_dirs)
#sleuth object will store not only the information about the experiment,
#but also details of the model to be used for differential testing, and the results.
#It is prepared and used with four commands that
#(1) load the kallisto processed data into the object
#(2) estimate parameters for the sleuth response error measurement (full) model
#(3) estimate parameters for the sleuth reduced model
#(4) perform differential analysis (testing) using the likelihood ratio test.
sleuth_object <- sleuth_prep(sample2condition, extra_bootstrap_summary = TRUE)
colnames(sample2condition)
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
#2 NA values were found during variance shrinkage estimation due to mean observation values outside of the range used for the LOESS fit.
#The LOESS fit will be repeated using exact computation of the fitted surface to extrapolate the missing values.
#These are the target ids with NA values: ENST00000361624.2, ENST00000387347.2
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
models(sleuth_object)
sleuth_table <- sleuth_results(sleuth_object, 'reduced:full', 'lrt', show_all = FALSE)
sleuth_significant <- dplyr::filter(sleuth_table, qval <= 0.05)
head(sleuth_significant, 20)
plot_bootstrap(sleuth_object, "ENST00000263734", units = "est_counts", color_by = "condition")
plot_bootstrap(sleuth_object, "ENST00000223642.3", units = "est_counts", color_by = "condition")
plot_bootstrap(sleuth_object, "ENST00000223642.3", units = "est_counts", color_by = "condition")
plot_bootstrap(sleuth_object, "ENST00000223642.3", units = "est_counts", color_by = "condition")
plot_bootstrap(sleuth_object, "ENST00000223642.3", units = "est_counts", color_by = "condition")
source("http://bioconductor.org/biocLite.R")
# add gene names from ENSEMBL using biomaRt
install.packages("BiocManager")
BiocManager::install("biomaRt")
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
so <- sleuth_prep(sample2condition, target_mapping = t2g)
sleuth_object <- sleuth_prep(sample2condition, target_mapping = t2g)
## Instalation
#source("http://bioconductor.org/biocLite.R")
#BiocManager::install("rhdf5")
#install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
library("sleuth")
sleuth_object <- sleuth_prep(sample2condition, target_mapping = t2g)
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
#exploratory analysis
sleuth_live(sleuth_object)
sleuth_object <- sleuth_prep(sample2condition, target_mapping = t2g, read_bootstrap_tpm = TRUE, extra_bootstrap_summary = TRUE)
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
#exploratory analysis
sleuth_live(sleuth_object)
head(sleuth_significant, 20)
#exploratory analysis
sleuth_live(sleuth_object)
plot_pca(sleuth_object, color_by = 'condition')
plot_group_density(sleuth_object,
use_filtered = TRUE,
units = "est_counts",
trans = "log",
grouping = setdiff(colnames(sleuth_object$sample_to_covariates),
"sample"), offset = 1)
plot_pca(sleuth_object, color_by = 'condition')
plot1 <- plot_pca(sleuth_object, color_by = 'condition')
plot1
plot_pca(sleuth_object, color_by = 'condition')
plot_group_density(sleuth_object,
use_filtered = TRUE,
units = "est_counts",
trans = "log",
grouping = setdiff(colnames(sleuth_object$sample_to_covariates),
"sample"), offset = 1)
#exploratory analysis
sleuth_live(sleuth_object)
## Instalation
#source("http://bioconductor.org/biocLite.R")
#BiocManager::install("rhdf5")
#install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
library("sleuth")
set.seed(123)
#specify where the kallisto results are stored.
sample_id <- dir(file.path(".", "results"))
#paths to the kallisto results indexed by the sample IDs is collated with
kallisto_dirs <- file.path(".", "results", sample_id)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(sample2condition, path = kallisto_dirs)
# add gene names from ENSEMBL using biomaRt
install.packages("BiocManager")
install.packages("BiocManager")
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
sleuth_object <- sleuth_prep(sample2condition,
target_mapping = t2g,
read_bootstrap_tpm = TRUE,
extra_bootstrap_summary = TRUE)
## Instalation
#source("http://bioconductor.org/biocLite.R")
#BiocManager::install("rhdf5")
#install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
library("sleuth")
sleuth_object <- sleuth_prep(sample2condition,
target_mapping = t2g,
read_bootstrap_tpm = TRUE,
extra_bootstrap_summary = TRUE)
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
#NA values were found during variance shrinkage estimation due to mean observation values outside of the range used for the LOESS fit.
#The LOESS fit will be repeated using exact computation of the fitted surface to extrapolate the missing values.
#These are the target ids with NA values: ENST00000361624.2, ENST00000387347.2
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
models(sleuth_object)
sleuth_table <- sleuth_results(sleuth_object, 'reduced:full', 'lrt', show_all = FALSE)
#top 20 significant genes with a (Benjamini-Hochberg multiple testing corrected) q-value <= 0.05.
sleuth_significant <- dplyr::filter(sleuth_table, qval <= 0.05)
head(sleuth_significant, 20)
#exploratory analysis
plot_bootstrap(sleuth_object, "ENST00000223642.3", units = "est_counts", color_by = "condition")
plot_pca(sleuth_object, color_by = 'condition')
plot_group_density(sleuth_object,
use_filtered = TRUE,
units = "est_counts",
trans = "log",
grouping = setdiff(colnames(sleuth_object$sample_to_covariates),
"sample"), offset = 1)
sleuth_live(sleuth_object)
# Extract sleuth results
sleuth_results_table <- sleuth_results(sleuth_object, 'reduced:full', 'lrt', show_all = FALSE)
# Add log2-fold change to the results table
sleuth_results_table$log2foldchange <- sleuth_results_table$theta / log(2)
#NA values were found during variance shrinkage estimation due to mean observation values outside of the range used for the LOESS fit.
#The LOESS fit will be repeated using exact computation of the fitted surface to extrapolate the missing values.
#These are the target ids with NA values: ENST00000361624.2, ENST00000387347.2
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
# Extract sleuth results
sleuth_results_table <- sleuth_results(sleuth_object, 'reduced:full', 'lrt', show_all = FALSE)
# Add log2-fold change to the results table
sleuth_results_table$log2foldchange <- sleuth_results_table$theta / log(2)
nrow(sleuth_results_table)
# Add log2-fold change to the results table
sleuth_results_table$log2foldchange <- log2(sleuth_results_table$theta)
sleuth_results_table$theta
colunames(sleuth_results_table)
colnames(sleuth_results_table)
# Calculate log2-fold change using log2 function
sleuth_results_table$log2foldchange <- log2(sleuth_results_table$mean_obs)
# View the updated results table
head(sleuth_results_table)
# get pval <= 0.05
sleuth_significant <- dplyr::filter(sleuth_results_table, qval <= 0.05)
head(sleuth_significant, 20)
#exploratory analysis
plot_bootstrap(sleuth_object, "ENST00000223642.3", units = "est_counts", color_by = "condition")
sleuth_live(sleuth_object)
plot_pca(sleuth_object, color_by = 'condition')
plot_group_density(sleuth_object,
use_filtered = TRUE,
units = "est_counts",
trans = "log",
grouping = setdiff(colnames(sleuth_object$sample_to_covariates),
"sample"), offset = 1)
library(ggplot2)
# Create a volcano plot
ggplot(sleuth_results_table, aes(x = log2foldchange, y = -log10(pval))) +
geom_point(aes(color = qval < 0.05), alpha = 0.5) +  # Highlight significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change", y = "-log10(p-value)") +
theme_minimal()
## Instalation
#source("http://bioconductor.org/biocLite.R")
#BiocManager::install("rhdf5")
#install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
library("sleuth")
library(ggplot2)
set.seed(123)
#specify where the kallisto results are stored.
sample_id <- dir(file.path(".", "results"))
#paths to the kallisto results indexed by the sample IDs is collated with
kallisto_dirs <- file.path(".", "results", sample_id)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(sample2condition, path = kallisto_dirs)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'ensembl.org')
## Instalation
#source("http://bioconductor.org/biocLite.R")
#BiocManager::install("rhdf5")
#install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
#install.packages("BiocManager")
BiocManager::install("biomaRt")
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'https://ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
setwd("/Users/lollijagladiseva/Desktop/RNAseq/lncRNA_project/lncRNA_project/r_scripts")
#specify where the kallisto results are stored.
sample_id <- dir(file.path(".", "results"))
#paths to the kallisto results indexed by the sample IDs is collated with
kallisto_dirs <- file.path(".", "results", sample_id)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(sample2condition, path = kallisto_dirs)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'https://ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
listAttributes(mart)
biomaRt::listAttributes(mart = mart)
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
## Instalation
#source("http://bioconductor.org/biocLite.R")
#BiocManager::install("rhdf5")
#install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
#install.packages("BiocManager")
#BiocManager::install("biomaRt")
library("sleuth")
## Instalation
source("http://bioconductor.org/biocLite.R")
BiocManager::install("rhdf5")
install.packages("devtools")
devtools::install_github("pachterlab/sleuth")
install.packages("BiocManager")
BiocManager::install("biomaRt")
install.packages("BiocManager")
library("sleuth")
set.seed(123)
install.packages("BiocManager")
#specify where the kallisto results are stored.
sample_id <- dir(file.path(".", "results"))
#specify where the kallisto results are stored.
sample_id <- dir(file.path(".", "results"))
#paths to the kallisto results indexed by the sample IDs is collated with
kallisto_dirs <- file.path(".", "results", sample_id)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(sample2condition, path = kallisto_dirs)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
sleuth_object <- sleuth_prep(sample2condition,
target_mapping = t2g,
read_bootstrap_tpm = TRUE,
extra_bootstrap_summary = TRUE)
library("sleuth")
sleuth_object <- sleuth_prep(sample2condition,
target_mapping = t2g,
read_bootstrap_tpm = TRUE,
extra_bootstrap_summary = TRUE)
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
sleuth_object <- sleuth_prep(sample2condition,
target_mapping = t2g,
read_bootstrap_tpm = TRUE,
extra_bootstrap_summary = TRUE,
transformation_function = function(x) log2(x + 0.5))
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
#NA values were found during variance shrinkage estimation due to mean observation values outside of the range used for the LOESS fit.
#The LOESS fit will be repeated using exact computation of the fitted surface to extrapolate the missing values.
#These are the target ids with NA values: ENST00000361624.2, ENST00000387347.2
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
models(sleuth_object)
sleuth_table <- sleuth_results(sleuth_object, 'reduced:full', 'lrt', show_all = FALSE)
#top 20 significant genes with a (Benjamini-Hochberg multiple testing corrected) q-value <= 0.05.
sleuth_significant <- dplyr::filter(sleuth_table, qval <= 0.05)
head(sleuth_significant, 20)
head(sleuth_table)
oe <- sleuth_wt(sleuth_object,
which_beta = 'paraclonal')
unique(sample2condition$condition)
oe <- sleuth_wt(sleuth_object, which_beta = 'conditionparaclonal')
models(sleuth_object)
oe <- sleuth_wt(sleuth_object, which_beta = 'conditionparental')
sleuth_results_oe <- sleuth_results(oe,
test = 'conditionparental',
show_all = TRUE)
head(sleuth_results_oe)
sleuth_live(oe)
head(sleuth_results_oe)
# Load ggplot2
library(ggplot2)
# Create a volcano plot
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < 0.05), alpha = 0.5) +  # Highlight significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
# Create a volcano plot
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < 0.05), alpha = 0.5) +  # Highlight significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ens_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
install.packages("ggrepel")
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ens_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
library(ggrepel)
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ens_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
significance_threshold <- 0.05
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ens_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ens_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50",
max.overlaps = Inf) +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ens_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
head(sleuth_results_oe)
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ext_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
listDatasets(mart)
library("sleuth")
library(ggplot2)
install.packages("ggrepel")
## Instalation
source("http://bioconductor.org/biocLite.R")
BiocManager::install("rhdf5")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("pachterlab/sleuth")
install.packages("devtools")
library("sleuth")
library(ggplot2)
library(ggrepel)
set.seed(123)
#specify where the kallisto results are stored.
sample_id <- dir(file.path(".", "results"))
#paths to the kallisto results indexed by the sample IDs is collated with
kallisto_dirs <- file.path(".", "results", sample_id)
#load file that describes the experimental design
sample2condition <- read.table(file.path(".", "NSCLC_exp_design.txt"),
header = TRUE,
stringsAsFactors=FALSE)
#directories must be appended in a new column
sample2condition <- dplyr::mutate(sample2condition, path = kallisto_dirs)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "GRCh38.p14",
host = 'ensembl.org')
listDatasets(mart)
listDatasets(mart)
BiocManager::install("biomaRt")
listDatasets(mart)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "GRCh38.p14",
host = 'ensembl.org')
ensembl_mart <- useMart("ensembl")
packageVersion("biomaRt")
listDatasets(mart)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "GRCh38",
host = 'ensembl.org')
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "GRCh38_p14",
host = 'ensembl.org')
listDatasets(mart)
ggplot(sleuth_results_oe, aes(x = b, y = -log10(pval))) +
geom_point(aes(color = qval < significance_threshold), alpha = 0.5, size = 2) +  # Highlight significant points
geom_text_repel(aes(label = ext_gene),
data = subset(sleuth_results_oe, qval < significance_threshold),
box.padding = 0.5, point.padding = 0.2, segment.color = "grey50") +  # Add gene names for significant points
scale_color_manual(values = c("grey", "red")) +       # Customize colors
labs(title = "Volcano Plot", x = "Log2-Fold Change (b)", y = "-log10(p-value)") +
theme_minimal()
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'ensembl.org')
BiocManager::install("biomaRt")
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'https://ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
devtools::install_github("pachterlab/sleuth")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("biomaRt")
library("sleuth")
library(ggplot2)
library(ggrepel)
# add gene names from ENSEMBL using biomaRt
#collect gene names with
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = 'https://ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name"), mart = mart)
listAttributes(mart)
